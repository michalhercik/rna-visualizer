@startuml
interface IDataBasePair {
    +residueIndex1: number
    +residueIndex2: number
    +basePairType: string
    +classes: any[]
}
interface IDataLabel {
    +labelContent: IDataLabelContent
    +labelLine: IDataLabelLine
    +residueIndex: number
}
interface IDataLabelContent {
    +classes: string[]
    +label: string
    +x: number
    +y: number
}
interface IDataLabelLine {
    +classes: string[]
    +x1: number
    +x2: number
    +y1: number
    +y2: number
}
interface IDataResidue {
    +classes: string[]
    +x: number
    +y: number
    +residueName: string
    +residueIndex: number
    +templateResidueIndex: number
    +templateResidueName: string
}
interface IRnaComplexes {
    +name: string
    +rnaMolecules: IRnaMolecules[]
}
interface IRnaMolecules {
    +name: string
    +basePairs: IDataBasePair[]
    +labels: IDataLabel[]
    +sequence: IDataResidue[]
}
interface IRnaInput {
    +classes: any[]
    +rnaComplexes: IRnaComplexes[]
}
interface IDataStyle {
    +name: string
}
interface Transformation {
    +applyX(x: number): number
    +applyY(y: number): number
}
interface ILine {
    +getTransformedX1(): number
    +getTransformedY1(): number
    +getTransformedX2(): number
    +getTransformedY2(): number
    +getX1(): number
    +getY1(): number
    +getX2(): number
    +getY2(): number
    +isVisible(): boolean
    +getClasses(): string[]
}
interface IAnimation {
    +changeState(index: number, isActive: boolean): void
    +do(elapsed: number): void
    +reverse(): void
    +animate(rna: RnaVis, duration: number, after: AfterFn): void
}
IDataLabel --> "1" IDataLabelContent
IDataLabel --> "1" IDataLabelLine
IRnaComplexes --> "*" IRnaMolecules
IRnaMolecules --> "*" IDataBasePair
IRnaMolecules --> "*" IDataLabel
IRnaMolecules --> "*" IDataResidue
IRnaInput --> "*" IRnaComplexes
@enduml